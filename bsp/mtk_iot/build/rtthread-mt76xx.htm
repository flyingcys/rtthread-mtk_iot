<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-mt76xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-mt76xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Tue Sep 19 16:19:50 2017
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DebugMon_Handler</a><BR>
 <LI><a href="#[174]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16d]">rt_assert_handler</a><BR>
 <LI><a href="#[1]">DMA_ERROR_LISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">DMA_ERROR_LISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">BusFault_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[2]">CachePreInit</a> from system_mt7687.o(.text) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[1]">DMA_ERROR_LISR</a> from dma.o(.text) referenced 6 times from dma.o(.data)
 <LI><a href="#[1]">DMA_ERROR_LISR</a> from dma.o(.text) referenced from dma.o(.text)
 <LI><a href="#[9e]">DMA_LISR</a> from dma.o(.text) referenced 2 times from dma.o(.text)
 <LI><a href="#[1c]">DebugMon_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[af]">GPT_INT_Handler</a> from gpt.o(.text) referenced from gpt.o(.text)
 <LI><a href="#[17]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[18]">MemManage_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[16]">NMI_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1d]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[15]">Reset_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1b]">SVC_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1e]">SysTick_Handler</a> from board.o(.text) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[3]">SystemInit</a> from system_mt7687.o(.text) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[1a]">UsageFault_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[4]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[12]">fputc</a> from sys_init.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[8]">hal_gpt_callback0</a> from hal_gpt.o(.text) referenced from hal_gpt.o(.text)
 <LI><a href="#[7]">hal_gpt_callback1</a> from hal_gpt.o(.text) referenced from hal_gpt.o(.text)
 <LI><a href="#[6]">hal_lp_wic_isr</a> from hal_lp.o(.text) referenced from hal_lp.o(.text)
 <LI><a href="#[13]">hal_uart_receive_callback0</a> from hal_uart.o(.text) referenced from hal_uart.o(.constdata)
 <LI><a href="#[14]">hal_uart_receive_callback1</a> from hal_uart.o(.text) referenced from hal_uart.o(.constdata)
 <LI><a href="#[f]">hal_uart_send_callback0</a> from hal_uart.o(.text) referenced from hal_uart.o(.text)
 <LI><a href="#[d]">hal_uart_send_callback1</a> from hal_uart.o(.text) referenced from hal_uart.o(.text)
 <LI><a href="#[c]">i2s_enter_resume</a> from hal_i2s.o(.text) referenced from hal_misc.o(.text)
 <LI><a href="#[b]">i2s_enter_suspend</a> from hal_i2s.o(.text) referenced from hal_misc.o(.text)
 <LI><a href="#[a]">i2x_rx_handler</a> from hal_i2s.o(.text) referenced from hal_i2s.o(.text)
 <LI><a href="#[9]">i2x_tx_handler</a> from hal_i2s.o(.text) referenced from hal_i2s.o(.text)
 <LI><a href="#[1f]">isrC_main</a> from hal_nvic.o(.ramTEXT) referenced 96 times from startup_mt7687.o(.isr_vector)
 <LI><a href="#[5]">main</a> from startup.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[65]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[1d0]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[11]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[1d3]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[10]">sleep_GPT_CB</a> from hal_sleep_manager.o(.text) referenced from hal_sleep_manager.o(.text)
 <LI><a href="#[e]">uart_interrupt_handler</a> from uart.o(.text) referenced from hal_uart.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>gpt_get_current_time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpt_get_current_time &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
</UL>

<P><STRONG><a name="[5a]"></a>SF_DAL_FLAG_BUSY_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[1ef]"></a>SF_DAL_FLAG_BUSY_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[1f0]"></a>SF_DAL_FLAG_SUS_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[1f1]"></a>SF_DAL_FLAG_SUS_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[22]"></a>flash_sfc_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = flash_sfc_config &rArr; flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init (via Veneer)
</UL>

<P><STRONG><a name="[25]"></a>flash_sfc_read</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>flash_sfc_erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>Flash_ReturnReady</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main
</UL>

<P><STRONG><a name="[38]"></a>SF_DAL_CheckDeviceReady</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_suspend_bit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[3c]"></a>SF_DAL_CheckReadyAndResume</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[34]"></a>save_and_set_interrupt_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_check_sleep_locks (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
</UL>

<P><STRONG><a name="[37]"></a>restore_interrupt_mask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_restore_interrupt_mask (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_check_sleep_locks (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
</UL>

<P><STRONG><a name="[1f2]"></a>sfc_GPT_return_current_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[1f3]"></a>sfc_get_systime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[3e]"></a>sfc_delay_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>

<P><STRONG><a name="[3d]"></a>sfc_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
</UL>

<P><STRONG><a name="[52]"></a>sfc_getMaxGPRamSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
</UL>

<P><STRONG><a name="[3f]"></a>sfc_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[4d]"></a>sfc_GetDirectMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
</UL>

<P><STRONG><a name="[50]"></a>sfc_direct_read_setup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[40]"></a>sfc_transfer</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>

<P><STRONG><a name="[41]"></a>sfc_Command_List</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
</UL>

<P><STRONG><a name="[1f4]"></a>sfc_clear_gpram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[43]"></a>sfc_read</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id_quad
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
</UL>

<P><STRONG><a name="[44]"></a>sfc_write</STRONG> (Thumb, 76 bytes, Stack size 184 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>

<P><STRONG><a name="[47]"></a>sfc_security_write_crc</STRONG> (Thumb, 48 bytes, Stack size 184 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
</UL>

<P><STRONG><a name="[48]"></a>__sfc_write</STRONG> (Thumb, 74 bytes, Stack size 184 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>flash_suspend_Winbond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[3b]"></a>flash_resume_Winbond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[4c]"></a>flash_read_jedec_id</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
</UL>

<P><STRONG><a name="[24]"></a>flash_check_device</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[4f]"></a>flash_switch_mode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_direct_read_setup
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>flash_config</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
</UL>

<P><STRONG><a name="[53]"></a>flash_init</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>

<P><STRONG><a name="[35]"></a>flash_read_sr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>

<P><STRONG><a name="[42]"></a>flash_wait_ready</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>

<P><STRONG><a name="[54]"></a>flash_read_manu_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[55]"></a>flash_read_manu_id_quad</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[27]"></a>flash_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[28]"></a>flash_fast_read</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[39]"></a>flash_read_sr2</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_read_SR2_comand (via Veneer)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[2e]"></a>flash_unprotect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[58]"></a>flash_protect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
</UL>

<P><STRONG><a name="[2d]"></a>flash_write_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[59]"></a>flash_write_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[32]"></a>flash_erase_sector</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[30]"></a>flash_erase_sector_32k</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[2f]"></a>flash_erase_page</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[5b]"></a>flash_erase_chip</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>

<P><STRONG><a name="[5c]"></a>flash_erase</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[5d]"></a>flash_write</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[5e]"></a>flash_erase_write_security_crc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
</UL>

<P><STRONG><a name="[5f]"></a>flash_erase_write</STRONG> (Thumb, 228 bytes, Stack size 4144 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[1f5]"></a>query_spi_flash_status</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi_flash.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[15b]"></a>cmnSerialFlashClkConfToXtal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, top.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>cmnSerialFlashClkConfTo64M</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, top.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmnSerialFlashClkConfTo64M &rArr; cmnPLL1ON
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode (via Veneer)
</UL>

<P><STRONG><a name="[1f]"></a>isrC_main</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_nvic.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = isrC_main &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[1f6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ea]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1fa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1fb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[65]"></a>rt_init_thread_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_init_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>rt_hw_console_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hw_console_output &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[69]"></a>rt_application_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[6c]"></a>assert_failed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[6d]"></a>rtthread_startup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>rt_hw_board_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[d4]"></a>SysTick_Set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_mt7687.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo64M
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo160M
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureToXtal
</UL>

<P><STRONG><a name="[1fc]"></a>SysInitStatus_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_mt7687.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>SysInitStatus_Query</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_mt7687.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mt7687.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo64M
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo160M
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureToXtal
</UL>

<P><STRONG><a name="[3]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_mt7687.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[2]"></a>CachePreInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_mt7687.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[12]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[7c]"></a>system_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = system_init &rArr; prvSetupHardware &rArr; log_uart_init &rArr; hal_uart_init &rArr; hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfTo64M (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[8f]"></a>gpio_mode_init</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[91]"></a>gpio_oe_init</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_oe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[92]"></a>gpio_ies_init</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_ies_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[93]"></a>gpio_pull_up_init</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pull_up_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[94]"></a>gpio_pull_down_init</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pull_down_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[95]"></a>gpio_output_init</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[1fe]"></a>bsp_ept_gpio_set_control_by_cm4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_gpio_ept_config.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>bsp_ept_gpio_setting_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_gpio_ept_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_ept_gpio_setting_init &rArr; gpio_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_down_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_up_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ies_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_oe_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[3a]"></a>customer_flash_suspend_bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
</UL>

<P><STRONG><a name="[4a]"></a>customer_switch_spi_mode_command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>customer_switch_spiq_mode_command</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>customer_flash_read_SR2_comand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
</UL>

<P><STRONG><a name="[23]"></a>customer_flash_register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
</UL>

<P><STRONG><a name="[97]"></a>DMA_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Flush
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_channel_idle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config_Internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FullSize_FreeChannel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FreeChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaRxStop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaTxStop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_stop_rx_vfifo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_stop_tx_vfifo
</UL>

<P><STRONG><a name="[96]"></a>DMA_Run</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[1ff]"></a>DMA_GetChannel</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>DMA_FreeChannel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[200]"></a>DMA_FullSize_CheckIdleChannel</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>DMA_FullSize_FreeChannel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[9b]"></a>DMA_Clock_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_channel_busy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config_Internal
</UL>

<P><STRONG><a name="[9a]"></a>DMA_Config_Internal</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1]"></a>DMA_ERROR_LISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERROR_LISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERROR_LISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dma.o(.text)
<LI> dma.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>DMA_Register</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9d]"></a>DMA_UnRegister</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a0]"></a>DMA_Clock_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
</UL>

<P><STRONG><a name="[9e]"></a>DMA_LISR</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_LISR
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Disable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[a5]"></a>dma_set_channel_busy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>

<P><STRONG><a name="[a6]"></a>dma_set_channel_idle</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[a7]"></a>DMA_Vfifo_init</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Vfifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[de]"></a>DMA_Vfifo_SetAdrs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Rx_VFIFO_Initialize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Tx_VFIFO_Initialize
</UL>

<P><STRONG><a name="[148]"></a>DMA_Vfifo_Set_timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
</UL>

<P><STRONG><a name="[132]"></a>DMA_Vfifo_enable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[13b]"></a>DMA_Vfifo_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[a8]"></a>DMA_Vfifo_Flush</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Vfifo_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaRxStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaTxStart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Rx_VFIFO_Initialize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Tx_VFIFO_Initialize
</UL>

<P><STRONG><a name="[e1]"></a>DMA_Vfifo_Register_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_VDMA_Rx_Register_Callback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_register_rx_vfifo_callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_register_tx_vfifo_callback
</UL>

<P><STRONG><a name="[e3]"></a>DMA_Vfifo_Register_TO_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_VDMA_Rx_Register_TO_Callback
</UL>

<P><STRONG><a name="[a9]"></a>get_sf_lock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
</UL>

<P><STRONG><a name="[29]"></a>free_sf_lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>retrieve_sf_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[aa]"></a>release_sf_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
</UL>

<P><STRONG><a name="[ab]"></a>hal_flash_direct_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>

<P><STRONG><a name="[ac]"></a>flash_sfc_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flash_sfc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>

<P><STRONG><a name="[ad]"></a>GPT_ResetTimer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvTMR_init
</UL>

<P><STRONG><a name="[ae]"></a>GPT_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
</UL>

<P><STRONG><a name="[cf]"></a>GPT_Stop</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvTMR_init
</UL>

<P><STRONG><a name="[af]"></a>GPT_INT_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_INT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_TMR_INT_status_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpt.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>GPT_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvTMR_init
</UL>

<P><STRONG><a name="[b2]"></a>GPT_return_current_count</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>

<P><STRONG><a name="[b3]"></a>CM4_GPT2Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvGPT2Init
</UL>

<P><STRONG><a name="[b4]"></a>CM4_GPT4Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvGPT4Init
</UL>

<P><STRONG><a name="[b5]"></a>I2sVdmaTxStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2sVdmaTxStart &rArr; DMA_Vfifo_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_tx_vfifo
</UL>

<P><STRONG><a name="[b6]"></a>I2sVdmaRxStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2sVdmaRxStart &rArr; DMA_Vfifo_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_rx_vfifo
</UL>

<P><STRONG><a name="[b7]"></a>I2sSetVdmaTxIntrEn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx_dma_interrupt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_tx_dma_interrupt
</UL>

<P><STRONG><a name="[b8]"></a>I2sSetVdmaRxIntrEn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_rx_dma_interrupt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_rx_dma_interrupt
</UL>

<P><STRONG><a name="[b9]"></a>I2sVdmaTxStop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[ba]"></a>I2sVdmaRxStop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[109]"></a>I2sSetVdmaTxThreshold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_tx_vfifo
</UL>

<P><STRONG><a name="[10b]"></a>I2sSetVdmaRxThreshold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_rx_vfifo
</UL>

<P><STRONG><a name="[201]"></a>I2sWriteVdmaTxFifo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>I2sReadVdmaRxFifo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>I2sGetVdmaTxFifoCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_get_tx_sample_count
</UL>

<P><STRONG><a name="[107]"></a>I2sGetVdmaRxFifoCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_get_rx_sample_count
</UL>

<P><STRONG><a name="[bb]"></a>I2sSetGblCfg</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2sSetGblCfg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[bc]"></a>I2sSetDlCfg</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2sSetDlCfg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[bd]"></a>I2sSetUlCfg</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2sSetUlCfg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[fd]"></a>I2sClkFifoEn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_audio_top
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_audio_top
</UL>

<P><STRONG><a name="[112]"></a>I2sDlEn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_tx
</UL>

<P><STRONG><a name="[116]"></a>I2sUlEn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_rx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_rx
</UL>

<P><STRONG><a name="[f8]"></a>I2sReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_deinit
</UL>

<P><STRONG><a name="[be]"></a>I2sCfgInitialSetting</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_init
</UL>

<P><STRONG><a name="[c1]"></a>xpllMicroDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xpllOpen
</UL>

<P><STRONG><a name="[bf]"></a>xpllOpen</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xpllMicroDelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_audio_top
</UL>

<P><STRONG><a name="[ff]"></a>xpllClose</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_i2s_internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_audio_top
</UL>

<P><STRONG><a name="[203]"></a>hal_lp_connsys_get_own_enable_int</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>hal_lp_connsys_give_n9_own</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>hal_lp_connsys_get_ownership</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_lp.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>hal_lp_deep_sleep_set_rgu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_deep_sleep
</UL>

<P><STRONG><a name="[c6]"></a>hal_lp_legacy_sleep_set_rgu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_legacy_sleep
</UL>

<P><STRONG><a name="[c2]"></a>hal_lp_deep_sleep</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_deep_sleep_set_rgu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_cm4_hclk_switch
</UL>

<P><STRONG><a name="[c5]"></a>hal_lp_legacy_sleep</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_legacy_sleep_set_rgu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_cm4_hclk_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[c7]"></a>hal_lp_handle_intr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[206]"></a>hal_lp_get_wic_wakeup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>hal_lp_get_wic_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>hal_trng_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_trng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[208]"></a>hal_trng_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_trng.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>hal_trng_get_generated_random_number</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_trng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_trng_get_generated_random_number &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c9]"></a>get_current_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>

<P><STRONG><a name="[c8]"></a>delay_time</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[ca]"></a>get_current_gpt4_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_current_gpt4_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_for_gpt4
</UL>

<P><STRONG><a name="[cb]"></a>delay_time_for_gpt4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[cc]"></a>delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[cd]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_for_gpt4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>

<P><STRONG><a name="[ce]"></a>drvTMR_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_start_timer_ms
</UL>

<P><STRONG><a name="[d0]"></a>TMR_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_start_timer_ms
</UL>

<P><STRONG><a name="[d1]"></a>TMR_Stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_stop_timer
</UL>

<P><STRONG><a name="[d2]"></a>drvGPT2Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>

<P><STRONG><a name="[d3]"></a>drvGPT4Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
</UL>

<P><STRONG><a name="[b0]"></a>clear_TMR_INT_status_bit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_INT_Handler
</UL>

<P><STRONG><a name="[81]"></a>top_xtal_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c0]"></a>top_xtal_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xpllOpen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
</UL>

<P><STRONG><a name="[7f]"></a>top_mcu_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_timeout
</UL>

<P><STRONG><a name="[61]"></a>cmnPLL1ON</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmnPLL1ON
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfTo64M (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo64M
</UL>

<P><STRONG><a name="[d6]"></a>cmnPLL1ON_PLL2ON</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmnPLL1ON_PLL2ON
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo160M
</UL>

<P><STRONG><a name="[15c]"></a>cmnPLL1OFF_PLL2OFF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, top.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[d5]"></a>cmnCpuClkConfigureToXtal</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, top.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[82]"></a>cmnCpuClkConfigureTo192M</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, top.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmnCpuClkConfigureTo192M &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON_PLL2ON
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[d7]"></a>cmnCpuClkConfigureTo160M</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, top.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON_PLL2ON
</UL>

<P><STRONG><a name="[d8]"></a>cmnCpuClkConfigureTo64M</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, top.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1ON
</UL>

<P><STRONG><a name="[da]"></a>getc_nowait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[d9]"></a>getc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc_nowait
</UL>

<P><STRONG><a name="[12d]"></a>uart_output_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_polling
</UL>

<P><STRONG><a name="[134]"></a>uart_input_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_polling
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_char
</UL>

<P><STRONG><a name="[db]"></a>halUART_SetFormat</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[dc]"></a>halUART_HWInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = halUART_HWInit &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[122]"></a>halUART_Get_VFIFO_Length</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[137]"></a>halUART_Read_VFIFO_Data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
</UL>

<P><STRONG><a name="[130]"></a>halUART_Write_VFIFO_Data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[dd]"></a>halUART_Tx_VFIFO_Initialize</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Flush
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_SetAdrs
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[df]"></a>halUART_Rx_VFIFO_Initialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Flush
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_SetAdrs
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[e0]"></a>halUART_VDMA_Rx_Register_Callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Register_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[e2]"></a>halUART_VDMA_Rx_Register_TO_Callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Register_TO_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[142]"></a>uart_set_hardware_flowcontrol</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_hardware_flowcontrol
</UL>

<P><STRONG><a name="[144]"></a>uart_set_software_flowcontrol</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_software_flowcontrol
</UL>

<P><STRONG><a name="[146]"></a>uart_disable_flowcontrol</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_disable_flowcontrol
</UL>

<P><STRONG><a name="[129]"></a>uart_set_sleep_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[13d]"></a>uart_unmask_send_interrupt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[12c]"></a>uart_mask_send_interrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[e]"></a>uart_interrupt_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_interrupt_handler &rArr; uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>uart_reset_default_value</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[12b]"></a>uart_query_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[87]"></a>hal_cache_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hal_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[209]"></a>hal_cache_deinit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, hal_cache.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>hal_cache_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[2c]"></a>hal_cache_disable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>hal_cache_region_enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[8b]"></a>hal_cache_region_disable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[88]"></a>hal_cache_set_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[89]"></a>hal_cache_region_config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_region_config
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[e5]"></a>hal_cache_invalidate_one_cache_line</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
</UL>

<P><STRONG><a name="[e6]"></a>hal_cache_invalidate_multiple_cache_lines</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
</UL>

<P><STRONG><a name="[2b]"></a>hal_cache_invalidate_all_cache_lines</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[e7]"></a>hal_cache_flush_one_cache_line</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
</UL>

<P><STRONG><a name="[e8]"></a>hal_cache_flush_multiple_cache_lines</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
</UL>

<P><STRONG><a name="[e9]"></a>hal_cache_flush_all_cache_lines</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>

<P><STRONG><a name="[20a]"></a>hal_cache_is_cacheable</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hal_cache.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>hal_flash_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hal_flash_init &rArr; flash_sfc_config &rArr; flash_check_device &rArr; flash_read_jedec_id &rArr; sfc_read &rArr; sfc_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[20b]"></a>hal_flash_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>hal_flash_erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>hal_flash_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read
</UL>

<P><STRONG><a name="[ec]"></a>hal_flash_write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_write
</UL>

<P><STRONG><a name="[ed]"></a>hal_gpt_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[ef]"></a>hal_gpt_deinit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>

<P><STRONG><a name="[21]"></a>hal_gpt_get_free_run_count</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hal_gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time (via Veneer)
</UL>

<P><STRONG><a name="[20c]"></a>hal_gpt_get_duration_count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpt.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>hal_gpt_get_running_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>

<P><STRONG><a name="[f1]"></a>hal_gpt_register_callback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[f2]"></a>hal_gpt_start_timer_ms</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvTMR_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_time
</UL>

<P><STRONG><a name="[f3]"></a>hal_gpt_stop_timer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Stop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>

<P><STRONG><a name="[f4]"></a>hal_gpt_delay_ms</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[f5]"></a>hal_gpt_delay_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[f6]"></a>hal_i2s_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sCfgInitialSetting
</UL>

<P><STRONG><a name="[f7]"></a>hal_i2s_deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sReset
</UL>

<P><STRONG><a name="[f9]"></a>hal_i2s_get_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[fa]"></a>hal_i2s_set_config</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_i2s_set_config &rArr; DMA_Init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetUlCfg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetDlCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetGblCfg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_is_sample_rate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_enter_resume
</UL>

<P><STRONG><a name="[fc]"></a>hal_i2s_enable_audio_top</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xpllOpen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sClkFifoEn
</UL>

<P><STRONG><a name="[fe]"></a>hal_i2s_disable_audio_top</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xpllClose
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sClkFifoEn
</UL>

<P><STRONG><a name="[100]"></a>hal_i2s_enable_tx_dma_interrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaTxIntrEn
</UL>

<P><STRONG><a name="[101]"></a>hal_i2s_disable_tx_dma_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaTxIntrEn
</UL>

<P><STRONG><a name="[102]"></a>hal_i2s_enable_rx_dma_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaRxIntrEn
</UL>

<P><STRONG><a name="[103]"></a>hal_i2s_disable_rx_dma_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaRxIntrEn
</UL>

<P><STRONG><a name="[104]"></a>hal_i2s_get_tx_sample_count</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sGetVdmaTxFifoCnt
</UL>

<P><STRONG><a name="[106]"></a>hal_i2s_get_rx_sample_count</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sGetVdmaRxFifoCnt
</UL>

<P><STRONG><a name="[108]"></a>hal_i2s_setup_tx_vfifo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_i2s_setup_tx_vfifo &rArr; I2sVdmaTxStart &rArr; DMA_Vfifo_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaTxThreshold
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaTxStart
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_enter_resume
</UL>

<P><STRONG><a name="[10a]"></a>hal_i2s_setup_rx_vfifo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_i2s_setup_rx_vfifo &rArr; I2sVdmaRxStart &rArr; DMA_Vfifo_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaRxThreshold
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sVdmaRxStart
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_enter_resume
</UL>

<P><STRONG><a name="[10c]"></a>hal_i2s_stop_tx_vfifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[10d]"></a>hal_i2s_stop_rx_vfifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Stop
</UL>

<P><STRONG><a name="[10f]"></a>hal_i2s_register_tx_vfifo_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Register_Callback
</UL>

<P><STRONG><a name="[110]"></a>hal_i2s_register_rx_vfifo_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Register_Callback
</UL>

<P><STRONG><a name="[111]"></a>hal_i2s_enable_tx</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sDlEn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>

<P><STRONG><a name="[115]"></a>hal_i2s_enable_rx</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sUlEn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>

<P><STRONG><a name="[117]"></a>hal_i2s_disable_tx</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sDlEn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sGetVdmaTxFifoCnt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>

<P><STRONG><a name="[11a]"></a>hal_i2s_disable_rx</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sUlEn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>

<P><STRONG><a name="[20d]"></a>hal_i2s_tx_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>hal_i2s_rx_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>i2s_enter_suspend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_i2s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>i2s_enter_resume</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2s_enter_resume &rArr; hal_i2s_set_config &rArr; DMA_Init &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_rx_vfifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_tx_vfifo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>log_hal_fatal_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>log_hal_error_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_rx_vfifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_setup_tx_vfifo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_stop_timer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_start_timer_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_register_callback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_running_status
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_deinit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
</UL>

<P><STRONG><a name="[210]"></a>log_hal_warning_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>log_hal_info_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_rx
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_rx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_tx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[211]"></a>log_hal_dump_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_log.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>bt_driver_restore_btif</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>default_bt_driver_restore_btif</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_misc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>hal_module_sleep_register_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_register_suspend_cb
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_register_resume_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[214]"></a>hal_nvic_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_nvic.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>hal_nvic_enable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_channel_busy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[9f]"></a>hal_nvic_disable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[215]"></a>hal_nvic_get_pending_irq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_nvic.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>hal_nvic_set_pending_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>hal_nvic_clear_pending_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[a4]"></a>hal_nvic_set_priority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_channel_busy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
</UL>

<P><STRONG><a name="[217]"></a>hal_nvic_get_priority</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_nvic.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>hal_nvic_register_isr_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_channel_busy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[120]"></a>hal_nvic_save_and_set_interrupt_mask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nvic_save_and_set_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[121]"></a>hal_nvic_restore_interrupt_mask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nvic_restore_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[e4]"></a>uart_send_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_restore_interrupt_mask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_save_and_set_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[123]"></a>hal_uart_set_format</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_baudrate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[126]"></a>hal_uart_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_uart_init &rArr; hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_sleep_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[12a]"></a>hal_uart_deinit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_mask_send_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[80]"></a>hal_uart_put_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_output_char
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_putchar
</UL>

<P><STRONG><a name="[12e]"></a>hal_uart_send_polling</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_output_char
</UL>

<P><STRONG><a name="[12f]"></a>hal_uart_send_dma</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_enable_interrupt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Write_VFIFO_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_restore_interrupt_mask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_save_and_set_interrupt_mask
</UL>

<P><STRONG><a name="[133]"></a>hal_uart_get_char</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_input_char
</UL>

<P><STRONG><a name="[135]"></a>hal_uart_receive_polling</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_input_char
</UL>

<P><STRONG><a name="[136]"></a>hal_uart_receive_dma</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_enable_interrupt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Read_VFIFO_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
</UL>

<P><STRONG><a name="[138]"></a>hal_uart_get_available_send_space</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
</UL>

<P><STRONG><a name="[139]"></a>hal_uart_get_available_receive_bytes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_uart_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[13c]"></a>hal_uart_register_callback</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Register_Callback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_enable_interrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_unmask_send_interrupt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_VDMA_Rx_Register_TO_Callback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_VDMA_Rx_Register_Callback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
</UL>

<P><STRONG><a name="[13e]"></a>hal_uart_set_baudrate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[13f]"></a>hal_uart_set_dma</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Rx_VFIFO_Initialize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Tx_VFIFO_Initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_timeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[141]"></a>hal_uart_set_hardware_flowcontrol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_hardware_flowcontrol
</UL>

<P><STRONG><a name="[143]"></a>hal_uart_set_software_flowcontrol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_software_flowcontrol
</UL>

<P><STRONG><a name="[145]"></a>hal_uart_disable_flowcontrol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable_flowcontrol
</UL>

<P><STRONG><a name="[147]"></a>hal_uart_set_dma_timeout</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_Set_timeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_timeout
</UL>

<P><STRONG><a name="[218]"></a>sleepdrv_register_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_sleep_driver.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>sleep_driver_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[14a]"></a>sleepdrv_get_mutex</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_get_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[14b]"></a>sleepdrv_release_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_sleep_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[14c]"></a>sleepdrv_get_handle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleepdrv_get_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[14d]"></a>sleepdrv_release_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
</UL>

<P><STRONG><a name="[14e]"></a>sleepdrv_is_handle_valid</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_is_sleep_handle_alive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
</UL>

<P><STRONG><a name="[14f]"></a>sleepdrv_release_sleep_lock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>

<P><STRONG><a name="[150]"></a>sleepdrv_hold_sleep_lock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>

<P><STRONG><a name="[219]"></a>sleepdrv_get_handle_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_sleep_driver.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>sleepdrv_check_sleep_locks</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_is_sleep_locked
</UL>

<P><STRONG><a name="[155]"></a>sleepdrv_get_lock_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_get_lock_status
</UL>

<P><STRONG><a name="[152]"></a>sleepdrv_get_lock_module</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_sleep_driver_dump_handle_name
</UL>

<P><STRONG><a name="[11c]"></a>sleepdrv_register_suspend_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
</UL>

<P><STRONG><a name="[15d]"></a>sleepdrv_run_suspend_cbs</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[11d]"></a>sleepdrv_register_resume_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
</UL>

<P><STRONG><a name="[15e]"></a>sleepdrv_run_resume_cbs</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_sleep_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_enter_sleep_mode
</UL>

<P><STRONG><a name="[21a]"></a>sleepdrv_set_sleep_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sleep_driver.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>sleepdrv_get_sleep_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sleep_driver.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>hal_sleep_manager_set_sleep_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_sleep_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_rx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_tx
</UL>

<P><STRONG><a name="[114]"></a>hal_sleep_manager_lock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_rx
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_enable_tx
</UL>

<P><STRONG><a name="[118]"></a>hal_sleep_manager_unlock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_rx
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx
</UL>

<P><STRONG><a name="[154]"></a>hal_sleep_manager_get_lock_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_index
</UL>

<P><STRONG><a name="[119]"></a>hal_sleep_manager_release_sleep_handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_index
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_rx
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_disable_tx
</UL>

<P><STRONG><a name="[156]"></a>hal_sleep_manager_sleep_driver_dump_handle_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_module
</UL>

<P><STRONG><a name="[157]"></a>hal_sleep_manager_is_sleep_locked</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_check_sleep_locks
</UL>

<P><STRONG><a name="[158]"></a>hal_sleep_manager_is_sleep_handle_alive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>

<P><STRONG><a name="[159]"></a>hal_sleep_manager_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_handle_intr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_register_callback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_init
</UL>

<P><STRONG><a name="[15a]"></a>hal_sleep_manager_enter_sleep_mode</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfTo64M (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureTo192M
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_legacy_sleep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnCpuClkConfigureToXtal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnPLL1OFF_PLL2OFF
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmnSerialFlashClkConfToXtal (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_run_resume_cbs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_run_suspend_cbs
</UL>

<P><STRONG><a name="[15f]"></a>hal_sleep_manager_set_sleep_time</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_sleep_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_start_timer_ms
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8d]"></a>log_uart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, syslog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_uart_init &rArr; hal_uart_init &rArr; hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[160]"></a>log_putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syslog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>

<P><STRONG><a name="[21c]"></a>print_module_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, syslog.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>dump_module_buffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, syslog.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>vprint_module_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, syslog.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>vdump_module_buffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, syslog.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1a5]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[161]"></a>rt_tick_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[7a]"></a>rt_tick_increase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[220]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[16a]"></a>rt_device_register</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[16c]"></a>rt_device_unregister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[221]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>rt_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[170]"></a>rt_device_open</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_device_open &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[171]"></a>rt_device_close</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[172]"></a>rt_device_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[174]"></a>rt_device_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_device_write &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[175]"></a>rt_device_control</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[176]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[177]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[222]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>rt_thread_idle_excute</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[76]"></a>rt_thread_idle_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[223]"></a>rt_thread_idle_gethandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_sem_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[183]"></a>rt_sem_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[185]"></a>rt_sem_create</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[187]"></a>rt_sem_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[188]"></a>rt_sem_take</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[18c]"></a>rt_sem_trytake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[18d]"></a>rt_sem_release</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[18f]"></a>rt_sem_control</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[190]"></a>rt_mutex_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[191]"></a>rt_mutex_detach</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[192]"></a>rt_mutex_create</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[193]"></a>rt_mutex_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[194]"></a>rt_mutex_take</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[196]"></a>rt_mutex_release</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[224]"></a>rt_mutex_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>rt_event_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[198]"></a>rt_event_detach</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[199]"></a>rt_event_create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[19a]"></a>rt_event_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[19b]"></a>rt_event_send</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[19d]"></a>rt_event_recv</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[19e]"></a>rt_event_control</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[19f]"></a>rt_mb_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a0]"></a>rt_mb_detach</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a1]"></a>rt_mb_create</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1a3]"></a>rt_mb_delete</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1a4]"></a>rt_mb_send_wait</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[1a6]"></a>rt_mb_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[1a7]"></a>rt_mb_recv</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[1a8]"></a>rt_mb_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1a9]"></a>rt_mq_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1aa]"></a>rt_mq_detach</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1ab]"></a>rt_mq_delete</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[1ac]"></a>rt_mq_create</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1ad]"></a>rt_mq_send</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1af]"></a>rt_mq_urgent</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1b0]"></a>rt_mq_recv</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[1b1]"></a>rt_mq_control</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[225]"></a>rt_interrupt_enter_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>rt_interrupt_leave_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>rt_interrupt_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7b]"></a>rt_interrupt_leave</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[179]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[1b2]"></a>rt_get_errno</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[173]"></a>rt_set_errno</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>

<P><STRONG><a name="[1b3]"></a>_rt_errno</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[1c4]"></a>rt_memset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>

<P><STRONG><a name="[1ae]"></a>rt_memcpy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[227]"></a>rt_memmove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>rt_memcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[1b5]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[1b4]"></a>rt_strstr</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[228]"></a>rt_strcasecmp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>rt_strncpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[168]"></a>rt_strncmp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[229]"></a>rt_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>rt_strnlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>rt_strdup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1b8]"></a>rt_vsnprintf</STRONG> (Thumb, 618 bytes, Stack size 64 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[66]"></a>rt_kprintf</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>

<P><STRONG><a name="[6f]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1bb]"></a>rt_snprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1bc]"></a>rt_vsprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[1bd]"></a>rt_sprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[22b]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>rt_console_set_device</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1be]"></a>rt_kputs</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[1bf]"></a>rt_malloc_align</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1c0]"></a>rt_free_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_ffs</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[22c]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>rt_assert_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[22d]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>rt_system_heap_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1a2]"></a>rt_malloc</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[17c]"></a>rt_free</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1c2]"></a>rt_realloc</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[1c3]"></a>rt_calloc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[22f]"></a>rt_memory_info</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[235]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>rt_object_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[16e]"></a>rt_object_detach</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[186]"></a>rt_object_allocate</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[17d]"></a>rt_object_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[17b]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1c8]"></a>rt_object_find</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[236]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[77]"></a>rt_system_scheduler_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[18b]"></a>rt_schedule</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1ce]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1cf]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[167]"></a>rt_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[169]"></a>rt_exit_critical</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[237]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>rt_thread_suspend_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>rt_thread_resume_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>rt_thread_inited_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>rt_thread_timeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>rt_thread_init</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[163]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[19c]"></a>rt_thread_resume</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[6b]"></a>rt_thread_startup</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1d9]"></a>rt_thread_detach</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[6a]"></a>rt_thread_create</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[1da]"></a>rt_thread_delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[164]"></a>rt_thread_yield</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[180]"></a>rt_thread_suspend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[1db]"></a>rt_thread_sleep</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[67]"></a>rt_thread_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[195]"></a>rt_thread_control</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[1dc]"></a>rt_thread_find</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[23b]"></a>rt_timer_timeout_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, src_timer.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>rt_timer_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1d1]"></a>rt_timer_detach</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1df]"></a>rt_timer_create</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, src_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1e0]"></a>rt_timer_delete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, src_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[18a]"></a>rt_timer_start</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1d8]"></a>rt_timer_stop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[189]"></a>rt_timer_control</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[165]"></a>rt_timer_check</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[23c]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, src_timer.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>rt_system_timer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[75]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1d6]"></a>rt_hw_stack_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[23d]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[78]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
</UL>

<P><STRONG><a name="[162]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
</UL>

<P><STRONG><a name="[1cd]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1cc]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1ca]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[23e]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[23f]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_direct_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_get_config
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_init
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[153]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[244]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[245]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[246]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[249]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[45]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ResetTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UnRegister
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Register
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config_Internal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sCfgInitialSetting
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetUlCfg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetDlCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetGblCfg
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaRxIntrEn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetVdmaTxIntrEn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_register_suspend_cb
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_register_resume_cb
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_time
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_lock_module
</UL>

<P><STRONG><a name="[24a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[24b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[24c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>prvSetupHardware</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvSetupHardware &rArr; log_uart_init &rArr; hal_uart_init &rArr; hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_set_size
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_disable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c3]"></a>hal_lp_cm4_hclk_switch</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_lp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_legacy_sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_deep_sleep
</UL>

<P><STRONG><a name="[6]"></a>hal_lp_wic_isr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_lp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_lp.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>flash_Switch_Device_Mode</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spiq_mode_command (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spi_mode_command (via Veneer)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[57]"></a>flash_write_sr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
</UL>

<P><STRONG><a name="[8]"></a>hal_gpt_callback0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpt_callback0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_gpt.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>hal_gpt_callback1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpt_callback1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_gpt.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>hal_gpt_is_port_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_stop_timer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_start_timer_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_register_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_deinit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
</UL>

<P><STRONG><a name="[fb]"></a>i2s_is_sample_rate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2s_set_config
</UL>

<P><STRONG><a name="[10e]"></a>i2s_dma_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2x_rx_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2x_tx_handler
</UL>

<P><STRONG><a name="[9]"></a>i2x_tx_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_i2s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_i2s.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>i2x_rx_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_i2s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_dma_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_i2s.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_clear_pending_irq
</UL>

<P><STRONG><a name="[13a]"></a>hal_uart_check_irq_disable</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_disable_interrupt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_callback1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_callback0
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[13]"></a>hal_uart_receive_callback0</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_receive_callback0 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>hal_uart_receive_callback1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_receive_callback1 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>hal_uart_send_callback0</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_send_callback0 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>hal_uart_send_callback1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_send_callback1 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>hal_uart_is_config_valid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[125]"></a>hal_uart_translate_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_callback1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_callback0
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[140]"></a>hal_uart_translate_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma_timeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[131]"></a>uart_channel_to_dma_channel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[10]"></a>sleep_GPT_CB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_sleep_manager.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hal_sleep_manager.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>rt_thread_idle_entry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[17f]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[181]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[18e]"></a>rt_ipc_list_resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[184]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[1ba]"></a>print_number</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1b9]"></a>skip_atoi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1c1]"></a>plug_holes</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1c6]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1c7]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[1cb]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1d5]"></a>_rt_thread_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1d2]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1d4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1e1]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[1dd]"></a>_rt_timer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, src_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1de]"></a>_rt_timer_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, src_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
